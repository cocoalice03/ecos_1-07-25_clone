import { auth } from './firebase';

// Fonction simplifi√©e pour "connecter" un utilisateur par email
// En mode d√©veloppement, utilise localStorage pour √©viter les erreurs API
export async function authenticateWithEmail(email: string) {
  try {
    // En mode d√©veloppement, utiliser localStorage simple
    if (import.meta.env.DEV) {
      localStorage.setItem('userEmail', email);
      console.log('üîß Mode d√©veloppement : authentification simul√©e pour', email);
      return {
        success: true,
        email: email,
      };
    }
    
    // En production, utiliser Firebase Auth
    // (pour l'instant, utiliser aussi localStorage)
    localStorage.setItem('userEmail', email);
    return {
      success: true,
      email: email,
    };
  } catch (error) {
    console.error('Erreur lors de l\'authentification:', error);
    return {
      success: false,
      error
    };
  }
}

// V√©rifier si l'utilisateur est d√©j√† authentifi√©
export function getStoredEmail() {
  return localStorage.getItem('userEmail');
}

// D√©connecter l'utilisateur
export async function signOut() {
  try {
    // En mode d√©veloppement, nettoyer seulement localStorage
    if (import.meta.env.DEV) {
      localStorage.removeItem('userEmail');
      console.log('üîß Mode d√©veloppement : d√©connexion simul√©e');
      return { success: true };
    }
    
    // En production, utiliser Firebase Auth
    await auth.signOut();
    localStorage.removeItem('userEmail');
    return { success: true };
  } catch (error) {
    console.error('Erreur lors de la d√©connexion:', error);
    localStorage.removeItem('userEmail'); // Nettoyer quand m√™me
    return { success: false, error };
  }
}

export default auth;
